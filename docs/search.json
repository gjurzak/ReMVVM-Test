{"Deprecated.html#/s:6ReMVVM15StateSubscribera":{"name":"StateSubscriber","abstract":"<p>Observes every change of the state</p>"},"Deprecated.html#/s:6ReMVVM21StoreActionDispatchera":{"name":"StoreActionDispatcher","abstract":"<p>Gives the option to dishpatch actions</p>"},"Structs/SingleViewModelFactory.html#/s:6ReMVVM22SingleViewModelFactoryV4withACyxGxSgSSSgc_tcfc":{"name":"init(with:)","abstract":"<p>Initializes factory with closure</p>","parent_name":"SingleViewModelFactory"},"Structs/SingleViewModelFactory.html#/s:6ReMVVM22SingleViewModelFactoryV7creates4typeSbqd__m_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"SingleViewModelFactory"},"Structs/SingleViewModelFactory.html#/s:6ReMVVM22SingleViewModelFactoryV6create3keyqd__SgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"SingleViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryCACycfc":{"name":"init()","abstract":"<p>Initialize empty factory that creates Initializable view models. Other factories may be added by add() method.</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC4withACSayAA0deF0_pG_tcfc":{"name":"init(with:)","abstract":"<p>Initialize factory with other factories</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC4withAcA0deF0_p_tcfc":{"name":"init(with:)","abstract":"<p>Initialize factory with other factory.</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC4withACxyc_tclufc":{"name":"init(with:)","abstract":"<p>Initialize factory with factory method</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC4withACxSgyc_tclufc":{"name":"init(with:)","abstract":"<p>Initialize factory with factory method</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC4withACxSgSSSgc_tclufc":{"name":"init(with:)","abstract":"<p>Initialize factory with factory method</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC3add7factoryyAA0deF0_p_tF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC3add7factoryyxyc_tlF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC3add7factoryyxSgyc_tlF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC3add7factoryyxSgSSSgc_tlF":{"name":"add(factory:)","abstract":"<p>Adds factory to composite view model factory</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC7creates4typeSbxm_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"CompositeViewModelFactory"},"Classes/CompositeViewModelFactory.html#/s:6ReMVVM25CompositeViewModelFactoryC6create3keyxSgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"CompositeViewModelFactory"},"Structs/InitializableViewModelFactory.html#/s:6ReMVVM29InitializableViewModelFactoryVACycfc":{"name":"init()","abstract":"<p>Initializes factory</p>","parent_name":"InitializableViewModelFactory"},"Structs/InitializableViewModelFactory.html#/s:6ReMVVM29InitializableViewModelFactoryV7creates4typeSbxm_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"InitializableViewModelFactory"},"Structs/InitializableViewModelFactory.html#/s:6ReMVVM29InitializableViewModelFactoryV6create3keyxSgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"InitializableViewModelFactory"},"Protocols/ViewModelFactory.html#/s:6ReMVVM16ViewModelFactoryP7creates4typeSbqd__m_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to create view model of specified type</p>","parent_name":"ViewModelFactory"},"Protocols/ViewModelFactory.html#/s:6ReMVVM16ViewModelFactoryP6create3keyqd__SgSSSg_tlF":{"name":"create(key:)","abstract":"<p>Creates view model of specified type or returns nil if is not able</p>","parent_name":"ViewModelFactory"},"Protocols/ViewModelFactory.html":{"name":"ViewModelFactory","abstract":"<p>Factory that creates view models</p>"},"ViewModelFactory.html#/s:6ReMVVM13Initializablea":{"name":"Initializable","abstract":"<p>Requires empty constructor</p>"},"Structs/InitializableViewModelFactory.html":{"name":"InitializableViewModelFactory","abstract":"<p>ViewModelFactory that creates view models using empty constructor (Initializable view models)</p>"},"Classes/CompositeViewModelFactory.html":{"name":"CompositeViewModelFactory","abstract":"<p>ViewModelFactory that is composition of other factories. By default creates view models with empty constructor ie. Initializable view models.</p>"},"Structs/SingleViewModelFactory.html":{"name":"SingleViewModelFactory","abstract":"<p>Creates view models based on closure given in initializer.</p>"},"Classes/Provided.html#/s:6ReMVVM8ProvidedC12wrappedValuexSgvp":{"name":"wrappedValue","abstract":"<p>wrapped value of view model</p>","parent_name":"Provided"},"Classes/Provided.html#/s:6ReMVVM8ProvidedC3keyACyxGSS_tcfc":{"name":"init(key:)","abstract":"<p>Initializes property wrapper</p>","parent_name":"Provided"},"Classes/Provided.html#/s:6ReMVVM8ProvidedCACyxGycfc":{"name":"init()","abstract":"<p>Initializes property wrapper with no key</p>","parent_name":"Provided"},"Structs/ViewModelProvider.html#/s:6ReMVVM17ViewModelProviderV4withAcA5StoreCyxG_tcAA0G5StateRzlufc":{"name":"init(with:)","abstract":"<p>Initialize provider with the store</p>","parent_name":"ViewModelProvider"},"Structs/ViewModelProvider.html#/s:6ReMVVM17ViewModelProviderV04viewD03for4withxSgSo16UIViewControllerCSg_SSSgtlF":{"name":"viewModel(for:with:)","abstract":"<p>Provides view model of specified type.</p>","parent_name":"ViewModelProvider"},"Structs/ViewModelProvider.html#/s:6ReMVVM17ViewModelProviderV04viewD03for4withxSgSo16UIViewControllerCSg_SSSgtAA13StateObserverRzlF":{"name":"viewModel(for:with:)","abstract":"<p>Provides view model of specified type and register it for state changes in the store.</p>","parent_name":"ViewModelProvider"},"Structs/ViewModelProvider.html#/s:6ReMVVM17ViewModelProviderV7creates4typeSbxm_tlF":{"name":"creates(type:)","abstract":"<p>Returns true if is able to provide view model of specified type.</p>","parent_name":"ViewModelProvider"},"Structs/ViewModelProvider.html#/s:6ReMVVM17ViewModelProviderV5clear7contextySo16UIViewControllerC_tF":{"name":"clear(context:)","abstract":"<p>Clears all view models created for specified context.</p>","parent_name":"ViewModelProvider"},"ViewModel.html#/s:6ReMVVM9ViewModela":{"name":"ViewModel","abstract":"<p>ViewModel type. It is tipealias for Any type.</p>"},"ViewModel.html#/s:6ReMVVM16ViewModelContexta":{"name":"ViewModelContext","abstract":"<p>ViewModelContext type - eg. for iOS UIViewController, MacOS NSViewController</p>"},"Structs/ViewModelProvider.html":{"name":"ViewModelProvider","abstract":"<p>Provides view models using current ViewModelFactory from the current state in the store.</p>"},"Classes/Provided.html":{"name":"Provided","abstract":"<p>Provides view model of specified type.</p>"},"Protocols/StateAssociated.html#/s:6ReMVVM15StateAssociatedP0C0Qa":{"name":"State","abstract":"<p>State type associated with the object</p>","parent_name":"StateAssociated"},"Classes/MockStateSubject.html#/s:6ReMVVM16MockStateSubjectC5statexSgvp":{"name":"state","abstract":"<p>Current state value</p>","parent_name":"MockStateSubject"},"Classes/MockStateSubject.html#/s:6ReMVVM16MockStateSubjectC5stateACyxGx_tcfc":{"name":"init(state:)","abstract":"<p>Initializes subject with the state</p>","parent_name":"MockStateSubject"},"Classes/MockStateSubject.html#/s:6ReMVVM16MockStateSubjectC06updateD05stateyx_tF":{"name":"updateState(state:)","abstract":"<p>Updates the state in the subject</p>","parent_name":"MockStateSubject"},"Classes/MockStateSubject.html#/s:6ReMVVM16MockStateSubjectC3add8observeryqd___tAA0D8ObserverRd__lF":{"name":"add(observer:)","abstract":"<p>Adds state observer</p>","parent_name":"MockStateSubject"},"Classes/MockStateSubject.html#/s:6ReMVVM16MockStateSubjectC6remove8observeryqd___tAA0D8ObserverRd__lF":{"name":"remove(observer:)","abstract":"<p>Removes state observer</p>","parent_name":"MockStateSubject"},"Structs/AnyStateSubject.html#/s:6ReMVVM15AnyStateSubjectV5statexSgvp":{"name":"state","abstract":"<p>Current state value</p>","parent_name":"AnyStateSubject"},"Structs/AnyStateSubject.html#/s:6ReMVVM15AnyStateSubjectV3add8observeryqd___tAA0D8ObserverRd__lF":{"name":"add(observer:)","abstract":"<p>Adds state observer</p>","parent_name":"AnyStateSubject"},"Structs/AnyStateSubject.html#/s:6ReMVVM15AnyStateSubjectV6remove8observeryqd___tAA0D8ObserverRd__lF":{"name":"remove(observer:)","abstract":"<p>Removes state observer</p>","parent_name":"AnyStateSubject"},"Structs/AnyStateSubject.html#/s:6ReMVVM15AnyStateSubjectV7subjectACyxGqd___tc0D0Qyd__RszAA0dE0Rd__lufc":{"name":"init(subject:)","abstract":"<p>Initializes erased type value</p>","parent_name":"AnyStateSubject"},"Protocols/StateSubject.html#/s:6ReMVVM12StateSubjectP5state0C0QzSgvp":{"name":"state","abstract":"<p>Current state value</p>","parent_name":"StateSubject"},"Protocols/StateSubject.html#/s:6ReMVVM12StateSubjectPAAE3anyAA03AnycD0Vy0C0QzGvp":{"name":"any","abstract":"<p>type erased value</p>","parent_name":"StateSubject"},"Protocols/StateSubject.html":{"name":"StateSubject","abstract":"<p>Subject with current state</p>"},"Structs/AnyStateSubject.html":{"name":"AnyStateSubject","abstract":"<p>Type erased StateSubject</p>"},"Classes/MockStateSubject.html":{"name":"MockStateSubject","abstract":"<p>Helper StateSubject that may be used for testing objects that are based on state subjects</p>"},"Protocols/StateAssociated.html":{"name":"StateAssociated","abstract":"<p>Associate object with the State</p>"},"Structs/Interceptor.html#/s:6ReMVVM11InterceptorV4nextACyxq_GyxSg_yq_cSgtc_tcfc":{"name":"init(next:)","abstract":"<p>Initialize interceptor with custom function.</p>","parent_name":"Interceptor"},"Structs/Interceptor.html#/s:6ReMVVM11InterceptorV4next6action10completionyxSg_yq_cSgtF":{"name":"next(action:completion:)","abstract":"<p>Intercepts call to the custom function</p>","parent_name":"Interceptor"},"Protocols/AnyMiddleware.html#/s:6ReMVVM13AnyMiddlewareP6onNext3for6action11interceptor10dispatcheryqd___AA11StoreAction_pAA11InterceptorVyAaI_pqd__GAA10Dispatcher_ptAA0K5StateRd__lF":{"name":"onNext(for:action:interceptor:dispatcher:)","abstract":"<p>Method will be called during dispatch process.</p>","parent_name":"AnyMiddleware"},"Protocols/Middleware.html#/s:6ReMVVM10MiddlewareP6ActionQa":{"name":"Action","abstract":"<p>type of action handled by this Middleware</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:6ReMVVM10MiddlewareP5StateQa":{"name":"State","abstract":"<p>type of state handled by this Middleware</p>","parent_name":"Middleware"},"Protocols/Middleware.html#/s:6ReMVVM10MiddlewareP6onNext3for6action11interceptor10dispatchery5StateQz_6ActionQzAA11InterceptorVyAlJGAA10Dispatcher_ptF":{"name":"onNext(for:action:interceptor:dispatcher:)","abstract":"<p>Method will be called during dispatch process.</p>","parent_name":"Middleware"},"Protocols/Middleware.html":{"name":"Middleware","abstract":"<p>Middleware associated with specific Action&rsquo;s type. </p>"},"Protocols/AnyMiddleware.html":{"name":"AnyMiddleware","abstract":"<p>Middleware enchances action&rsquo;s dispatch functionality and may be applied in the store during initialization process. Before action is reduced in the store&rsquo;s reducer it has to go through all middlewares in the stack and each onNext() method has to be called.</p>"},"Structs/Interceptor.html":{"name":"Interceptor","abstract":"<p>Intercepts call of next(action:completion:) method to the custom function. Used by Middleware to intercept the action to the next middleware in the stack."},"Middleware.html#/s:6ReMVVM23InterceptorNextFunctiona":{"name":"InterceptorNextFunction","abstract":"<p>Custom function that Interceptor&rsquo;s next(action:completion:) method will be intercepted to</p>"},"Structs/EmptyReducer.html#/s:6ReMVVM12EmptyReducerV6reduce5state4withq_q__xtFZ":{"name":"reduce(state:with:)","abstract":"<p>Returns not changed state.</p>","parent_name":"EmptyReducer"},"Structs/AnyReducer.html#/s:6ReMVVM10AnyReducerV4withACyxGSayAEG_tcfc":{"name":"init(with:)","abstract":"<p>Initialize reducer with an array of reducers to compose</p>","parent_name":"AnyReducer"},"Structs/AnyReducer.html#/s:6ReMVVM10AnyReducerV7reducerACyxGxx_AA11StoreAction_ptc_tcfc":{"name":"init(reducer:)","abstract":"<p>Initialize reducer with pure function</p>","parent_name":"AnyReducer"},"Structs/AnyReducer.html#/s:6ReMVVM10AnyReducerV6reduce5state4withxx_AA11StoreAction_ptF":{"name":"reduce(state:with:)","abstract":"<p>Reduce the state - returns new state base on current state and action.</p>","parent_name":"AnyReducer"},"Protocols/Reducer.html#/s:6ReMVVM7ReducerP6ActionQa":{"name":"Action","abstract":"<p>type of action handled by this Reducer</p>","parent_name":"Reducer"},"Protocols/Reducer.html#/s:6ReMVVM7ReducerP5StateQa":{"name":"State","abstract":"<p>type of state handled by this Reducer</p>","parent_name":"Reducer"},"Protocols/Reducer.html#/s:6ReMVVM7ReducerP6reduce5state4with5StateQzAH_6ActionQztFZ":{"name":"reduce(state:with:)","abstract":"<p>Pure function that returns new state based on current state and the action</p>","parent_name":"Reducer"},"Protocols/Reducer.html#/s:6ReMVVM7ReducerPAAE3anyAA03AnyC0Vy5StateQzGvpZ":{"name":"any","abstract":"<p>Returns type erasured reducer</p>","parent_name":"Reducer"},"Protocols/Reducer.html":{"name":"Reducer","abstract":"<p>Provides pure function that creates new state based on the action and current state. It is associated with specific Action type.</p>"},"Structs/AnyReducer.html":{"name":"AnyReducer","abstract":"<p>Type erasured reducer. Used to make composition of pure reducers into more complicated state reducers.</p>"},"Structs/EmptyReducer.html":{"name":"EmptyReducer","abstract":"<p>Reducer that doesn&rsquo;t change the state.</p>"},"Protocols/Dispatcher.html#/s:6ReMVVM10DispatcherP8dispatch6actionyAA11StoreAction_p_tF":{"name":"dispatch(action:)","abstract":"<p>Dishpatches an action.</p>","parent_name":"Dispatcher"},"Action.html#/s:6ReMVVM11StoreActionP":{"name":"StoreAction","abstract":"<p>Action that can be dispatched by Dispatrcher eg. Store.</p>"},"Protocols/Dispatcher.html":{"name":"Dispatcher","abstract":"<p>Object that is able to dishpatch actions</p>"},"Protocols/Subject.html#/s:6ReMVVM7SubjectP3add8observeryqd___tAA13StateObserverRd__lF":{"name":"add(observer:)","abstract":"<p>Adds state observer</p>","parent_name":"Subject"},"Protocols/Subject.html#/s:6ReMVVM7SubjectP6remove8observeryqd___tAA13StateObserverRd__lF":{"name":"remove(observer:)","abstract":"<p>Removes state observer</p>","parent_name":"Subject"},"Structs/StateMapper.html#/s:6ReMVVM11StateMapperV3mapACyxGqd__xc_tclufc":{"name":"init(map:)","abstract":"<p>Initialize mapper with map finction</p>","parent_name":"StateMapper"},"Protocols/StateObserver.html#/s:6ReMVVM13StateObserverP0C0Qa":{"name":"State","abstract":"<p>type of state to observe</p>","parent_name":"StateObserver"},"Protocols/StateObserver.html#/s:6ReMVVM13StateObserverP10willChange5statey0C0Qz_tF":{"name":"willChange(state:)","abstract":"<p>Notifies that state is going to be changed. Implementation of this method is optional ie. empty implemetation is provided.</p>","parent_name":"StateObserver"},"Protocols/StateObserver.html#/s:6ReMVVM13StateObserverP9didChange5state03oldC0y0C0Qz_AHSgtF":{"name":"didChange(state:oldState:)","abstract":"<p>Norifies the state did changed or initial value provided while adding to subject. Implementation of this method is optional ie. empty implemetation is provided.</p>","parent_name":"StateObserver"},"Protocols/StoreState.html#/s:6ReMVVM10StoreStateP7factoryAA16ViewModelFactory_pvp":{"name":"factory","abstract":"<p>View model factory that will be used to create view models.</p>","parent_name":"StoreState"},"Classes/Store.html#/s:6ReMVVM5StoreC5statexvp":{"name":"state","abstract":"<p>Current state value</p>","parent_name":"Store"},"Classes/Store.html#/s:6ReMVVM5StoreC4with7reducer10middleware12stateMappersACyxGx_AA10AnyReducerVyxGSayAA0I10Middleware_pGSayAA11StateMapperVyxGGtcfc":{"name":"init(with:reducer:middleware:stateMappers:)","abstract":"<p>Initializes the store</p>","parent_name":"Store"},"Classes/Store.html#/s:6ReMVVM5StoreC8dispatch6actionyAA0C6Action_p_tF":{"name":"dispatch(action:)","abstract":"<p>Dishpatches actions in the store. Actions go through middleware and are reduced at the end.</p>","parent_name":"Store"},"Classes/Store.html#/s:6ReMVVM5StoreC3add8observeryqd___tAA13StateObserverRd__lF":{"name":"add(observer:)","abstract":"<p>Adds the state observer. Observer will be notified on every state change occured in the store. It&rsquo;s allowed to add observer for any application&rsquo;s &lsquo;substate&rsquo; - but appropriete StateMapper has to be added during the store initialization.</p>","parent_name":"Store"},"Classes/Store.html#/s:6ReMVVM5StoreC6remove8observeryqd___tAA13StateObserverRd__lF":{"name":"remove(observer:)","abstract":"<p>Removes state observer.</p>","parent_name":"Store"},"Classes/Store.html":{"name":"Store","abstract":"<p>Contains application state that can be changed only by dispatching an action.</p>"},"Protocols/StoreState.html":{"name":"StoreState","abstract":"<p>Application state managed by  the store. It has to provide ViewModelFactory that will be used to create view models.</p>"},"Protocols/StateObserver.html":{"name":"StateObserver","abstract":"<p>Observes every change of the state</p>"},"Structs/StateMapper.html":{"name":"StateMapper","abstract":"<p>Maps application state to any other &lsquo;substate&rsquo; that may be observed in the store.</p>"},"Protocols/Subject.html":{"name":"Subject","abstract":"<p>Describes a subject that can be used to observe state changes</p>"},"Protocols/ReMVVMDriven.html#/s:6ReMVVM0A10MVVMDrivenP4BaseQa":{"name":"Base","abstract":"<p>type of the ReMVVMDriven object</p>","parent_name":"ReMVVMDriven"},"Protocols/ReMVVMDriven.html#/s:6ReMVVM0A10MVVMDrivenP6remvvmA2AVy4BaseQzGvp":{"name":"remvvm","abstract":"<p>ReMVVM object to be used by ReMVVMDriven</p>","parent_name":"ReMVVMDriven"},"Protocols/ReMVVMDriven.html#/s:6ReMVVM0A10MVVMDrivenP6remvvmA2AVy4BaseQzGvpZ":{"name":"remvvm","abstract":"<p>ReMVVM object to be used by ReMVVMDriven</p>","parent_name":"ReMVVMDriven"},"Structs/ReMVVM.html#/s:6ReMVVMAAV8dispatch6actionyAA11StoreAction_p_tF":{"name":"dispatch(action:)","abstract":"<p>Dispatches action in the store.</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html#/s:6ReMVVMAAVA2A10StoreStateRzlE10initialize4withyAA0C0CyxG_tFZ":{"name":"initialize(with:)","abstract":"<p>Initializes ReMVVM with the store. ReMVVM similar to Redux has only one store for the app.</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html#/s:6ReMVVMAAVAASo16UIViewControllerCRbzlE9viewModel3forAFqd__SgADSg_SSSgtlF":{"name":"viewModel(for:for:)","abstract":"<p>Provides view model of specified type.</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html#/s:6ReMVVMAAVAASo16UIViewControllerCRbzlE9viewModel3forAFqd__SgADSg_SSSgtAA13StateObserverRd__lF":{"name":"viewModel(for:for:)","abstract":"<p>Provides view model of specified type and register it for state changes in the store.</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html#/s:6ReMVVMAAVAASo16UIViewControllerCRbzlE5clear7contextyAD_tF":{"name":"clear(context:)","abstract":"<p>Clears all view models created for specified context.</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html#/s:6ReMVVMAAVA2A15StateAssociatedRzlE0C0a":{"name":"State","abstract":"<p>type of state in stateSubject</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html#/s:6ReMVVMAAVA2A15StateAssociatedRzlE12stateSubjectAA03AnycF0Vy0C0QzGvp":{"name":"stateSubject","abstract":"<p>state subject that can be used to observe state changes</p>","parent_name":"ReMVVM"},"Structs/ReMVVM.html":{"name":"ReMVVM","abstract":"<p>Allows to initialize ReMVVM.</p>"},"Protocols/ReMVVMDriven.html":{"name":"ReMVVMDriven","abstract":"<p>Marks object is driven by ReMVVM</p>"},"ReMVVM.html":{"name":"ReMVVM"},"Store.html":{"name":"Store"},"Action.html":{"name":"Action"},"Reducer.html":{"name":"Reducer"},"Middleware.html":{"name":"Middleware"},"StateSubject.html":{"name":"StateSubject"},"ViewModel.html":{"name":"ViewModel"},"ViewModelFactory.html":{"name":"ViewModelFactory"},"Deprecated.html":{"name":"Deprecated"}}